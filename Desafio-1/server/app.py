# server/app.py
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import os
import requests

load_dotenv()  # Carrega vari√°veis do .env

app = Flask(__name__)

# Configura√ß√µes da API Hugging Face
HF_API_URL = "https://api-inference.huggingface.co/models/mistralai/Mixtral-8x7B-Instruct-v0.1"
HF_API_KEY = os.getenv("HF_API_KEY")

headers = {
    "Authorization": f"Bearer {HF_API_KEY}",
    "Content-Type": "application/json"
}

# Prompt base para o chatbot (ajustado para CS:GO)
SYSTEM_PROMPT = """Voc√™ √© um especialista em Counter Strike (todas as vers√µes) chamado SargeBot. Suas respostas devem:
- Ser em portugu√™s
- Ter tom humor√≠stico mas informativo
- Focar em dicas, atualiza√ß√µes de patches e cen√°rio competitivo
- Evitar informa√ß√µes desatualizadas
- Negar respostas n√£o relacionadas ao CS
Exemplo: "Soldado, pra plantar a bomba do conhecimento √© aqui mesmo! üî•"
"""

def generate_response(user_input: str) -> str:
    prompt = f"[INST] {SYSTEM_PROMPT}\n\nUsu√°rio: {user_input} [/INST]"
    
    try:
        response = requests.post(
            HF_API_URL,
            headers=headers,
            json={"inputs": prompt, "parameters": {"max_new_tokens": 150}}
        )
        return response.json()[0]['generated_text'].split("[/INST]")[-1].strip()
    except Exception as e:
        return "Erro no quartel general! Tente novamente. üí•"

@app.route('/api/chat', methods=['POST'])
def chat():
    user_message = request.json.get('message', '').strip()
    
    # Filtro b√°sico para temas n√£o relacionados
    cs_keywords = [
        'cs', 'counter strike', 'mapa', 'arma', 'granada', 'bomba', 'ct', 'terrorista',
        'dust2', 'inferno', 'mirage', 'cache', 'overpass', 'strat', 'dica', 'competitivo',
        'patch', 'atualiza√ß', 'skins', 'treino', 'pr√°tica', 'esquadr√£o', 'round', 'eco',
        'headshot', 'awp', 'ak-47', 'm4a1', 'smoke', 'flashbang', 'molotov', 'clutch',
        'ace', 'spray', 'recoil', 'plantar', 'defusar', 'economia', 'frag', 'ranked',
        'fps', 'servidor', 'lan', 'hltv', 'major', 'boost', 'pixel', 'crosshair', 'demo',
        'squad', 'team', 't√°tica', 'estrat√©gia', 'mapa', 'posi√ß√£o', 'jogador', 'skin',
        'clan', 'esports', 'competi√ß√£o', 'torneio', 'ranking', 'clutch', 'eco round',
        'force buy', 'save round', 'pistol round', 'anti-eco', 'anti-force', 'buy round',
        'force', 'save', 'buy', 'rush', 'split', 'exec', 'fake', 'retake',
        # Mapas do Counter Strike
        'ancient', 'anubis', 'aztec', 'cobblestone', 'train', 'nuke', 'vertigo', 'office',
        'agency', 'italy', 'assault', 'militia', 'shortdust', 'shortnuke', 'lake', 'canals',
        'dust', 'tuscan', 'seaside', 'santorini', 'abbey', 'biome', 'subzero', 'chlorine',
        'grind', 'mocha', 'blagai', 'basalt', 'pitstop', 'calavera', 'depot', 'anarchy','dust2',
        'inferno', 'mirage', 'cache', 'overpass', 'train', 'nuke', 'vertigo', 'ancient',
        'anubis', 'aztec', 'cobblestone', 'office', 'agency', 'italy', 'assault', 'militia',
    ]
    
    # Verifica se a mensagem cont√©m palavras-chave relacionadas ao CS
    if not any(keyword in user_message.lower() for keyword in cs_keywords):
        return jsonify({"response": "Soldado, essa n√£o √© uma miss√£o do CS! Tente algo mais relacionado ao jogo. üö´"})
    
    bot_response = generate_response(user_message)
    return jsonify({"response": bot_response})

if __name__ == '__main__':
    app.run(debug=True)